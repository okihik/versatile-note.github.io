{
  "hash": "feec852b8298a94ef3359732b0051657",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Generational Accounting Model with R\"\ndate: \"2025-09-02\"\nformat:\n  html:\n    toc: true\n    code-fold: true\n    code-tools: true\n    self-contained: true\n---\n\n\n## Introduction: Why Model Generations?\n\nHow do demographic shifts, like a rapidly aging population, impact a nation's economy? What are the long-term consequences of today's tax and pension policies on future generations? These are some of the most critical questions in macroeconomics. To answer them, economists often turn to **Overlapping Generations (OLG) models**.\n\nThe core idea of an OLG model is simple yet powerful: at any point in time, the economy is populated by multiple generations who are at different stages of their life—some are young and working, others are middle-aged and saving for retirement, and some are retired and living off their savings. This structure makes OLG models the perfect tool for what is sometimes called \"generational accounting\": analyzing how economic policies and demographic changes create winners and losers across different generations.\n\nThis post documents the process of converting a classic OLG model from the Japanese textbook, **\"Matlabによるマクロ経済モデル入門\" (Introduction to Macroeconomic Models with Matlab)** by Oguro and Shimasawa, into R. We will then take it a step further by wrapping the R code in a **Quarto Shiny application** to create an interactive tool for policy simulation.\n\n## The Model: A Brief Overview\n\nThe model we are implementing is a standard OLG framework with the following key features:\n\n*   **Households**: Individuals live for a fixed number of years, working and saving during their youth and consuming their savings in retirement. Their main goal is to maximize their lifetime happiness (or \"utility\") by smoothing their consumption over their lives.\n*   **Firms**: Companies use capital (like machinery) and labor (from households) to produce goods and services. They operate in a competitive market, meaning prices and wages are determined by supply and demand.\n*   **Government**: The government taxes consumption, labor, and capital income. It uses this revenue to fund public spending and pay interest on its debt.\n*   **Transition Dynamics**: The model's real power lies in its ability to simulate how the economy evolves over time. We start from a stable \"steady state,\" introduce a shock (like a change in population growth), and watch as the economy slowly transitions to a new steady state over decades.\n\n## Step 1: Converting the MATLAB Code to R\n\nThe original book provides MATLAB code (`.m` files) for its simulations. Our first task is to translate this logic into R. This involves mapping MATLAB's syntax and functions to their R equivalents.\n\n### Parameter Setup\n\nWe begin by defining the core parameters of our model. This includes economic variables like tax rates and the capital depreciation rate, as well as simulation control parameters.\n\n\n::: {.cell}\n\n```{.r .cell-code  code-summary=\"R Code for Parameter Setup\"}\n# --- OLG Model Parameter Setup in R ---\n\n# Economic Parameters\nRHO     <- 0.01    # Time preference rate\nGAMMA   <- 0.5     # Inverse of the elasticity of intertemporal substitution\nGG      <- 0.02    # Technological progress rate\nEPSI    <- 0.3     # Capital share in production\nRDEP    <- 0.05    # Capital depreciation rate\n\n# Demographic and Lifespan Parameters\nIRET    <- 44     # Retirement age (working years: 1-44)\nIDIE    <- 65     # Lifespan (65 years)\n\n# Government and Tax Parameters\nTW      <- 0.20    # Labor income tax rate\nTR      <- 0.05    # Capital income tax rate\nTC      <- 0.10    # Consumption tax rate\nRGC     <- 0.15    # Government consumption to GDP ratio\nSDRT    <- 0.5     # Government debt issuance ratio\n\n# Simulation Control Parameters\nITER1   <- 250    # End year for the convergence calculation\nITER2   <- 500    # End year for the required simulation\nISE     <- 100    # Start year of the transition period\n```\n:::\n\n\n### The Steady-State Function\n\nA crucial part of the model is finding the \"steady state\"—a long-run equilibrium where key economic variables are stable. The book uses a `STEADY1.m` file for this. We create an equivalent R function, `STEADY1.R`, which iteratively solves for the equilibrium capital-labor ratio.\n\n\n::: {.cell}\n\n```{.r .cell-code  code-summary=\"R Function for Steady-State Calculation (STEADY1.R)\"}\nSTEADY1 <- function(XKL0) {\n  # ... (Full function code from our previous step) ...\n  # This function takes an initial guess for the capital-labor ratio\n  # and iterates until it finds a stable, converged value.\n  \n  OLDX <- XKL0\n  SDIF <- 1.0\n  # ... loop until SDIF is small enough ...\n  \n  return(OLDX)\n}\n```\n:::\n\n\n## Step 2: Building the Interactive Shiny App with Quarto\n\nWith the core logic translated to R, we can now build an interactive interface. Quarto makes it incredibly easy to embed a Shiny application directly into a document. This allows users to change model parameters with sliders and see the results update in real-time.\n\nBelow is the code for the complete Shiny application. It includes a sidebar for interactive controls and a main panel to display the output plots.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n<!-- #| layout: -screen -->\n#| code-summary: \"Full Quarto Shiny Application Code\"\n\n# ---\n# title: \"Interactive Macroeconomic OLG Model\"\n# format: dashboard\n# server: shiny\n# ---\n\n# {r setup, include=FALSE}\n# Load libraries and source helper functions\nlibrary(shiny)\nlibrary(ggplot2)\n# source(\"STEADY1.R\"), source(\"UDIF1.R\")\n\n# --- UI Sidebar ---\n# {r}\n#| panel: sidebar\n# sliderInput(\"tc_rate\", \"Consumption Tax Rate\", ...)\n# sliderInput(\"tw_rate\", \"Labor Income Tax Rate\", ...)\n# actionButton(\"run_sim\", \"Run Simulation\")\n\n# --- Server Logic and Output ---\n# {r}\n#| panel: main\n# renderPlot({\n#   input$run_sim\n#   isolate({\n#     # 1. Get parameters from sliders\n#     TC <- input$tc_rate\n#     # ...\n#\n#     # 2. Run the full OLG simulation logic here\n#     # ...\n#\n#     # 3. Generate plots with ggplot2\n#     p1 <- ggplot(...) + labs(title = \"Savings Rate\")\n#     # ...\n#\n#     # 4. Arrange and display plots\n#     grid.arrange(p1, p2, p3, p4)\n#   })\n# })\n```\n:::\n\n\n## Conclusion and Next Steps\n\nBy converting this powerful OLG model from MATLAB to R and embedding it in a Quarto Shiny app, we've created a flexible and accessible tool for economic analysis. It demonstrates how modern data science tools can bring complex academic models to life, allowing for intuitive exploration of important policy questions.\n\nThe next steps could involve expanding the model to include more features from the book, such as the public pension system (`OLG2.m`), or deploying the application to a web server for broader access.\n\nThis project serves as a complete walkthrough for anyone interested in applying their R skills to the fascinating world of computational economics.\n",
    "supporting": [
      "gam0_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}